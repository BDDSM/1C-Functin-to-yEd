
Процедура КнопкаВыполнитьНажатие(Кнопка)
	СформироватьНаСервере();
КонецПроцедуры

Функция ДлинаСтрелки(КоличествоЭлементов)

	Тело = "-";
	Для сч = 1 По Цел(КоличествоЭлементов / 3)- 1 Цикл
		Тело = Тело + "-";
	КонецЦикла;
	
	Возврат Тело;

КонецФункции // ДлинаСтрелки()

Функция ТипРегистра(Регистр)
	
	Если Метаданные.РегистрыНакопления.Содержит(Регистр) Тогда
		ТипРегистра = "РегистрыНакопления";
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(Регистр) Тогда
		ТипРегистра = "РегистрыРасчета";
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(Регистр) Тогда
		ТипРегистра = "РегистрыБухгалтерии";
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(Регистр) Тогда
		ТипРегистра = "РегистрыСведений";
	Иначе 
		ТипРегистра = "";
	КонецЕсли;
	
	Возврат ТипРегистра;
		
КонецФункции

Процедура СформироватьНаСервере()
	
	Если Метаданные.Документы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ЭтаФорма.Регистры.Очистить();
	
	ЭлементыФормы.ТекстUML.Очистить();
	
	ЭлементыФормы.ТекстUML.ДобавитьСтроку("@startuml");
	
	Если LeftToRight Тогда
		ЭлементыФормы.ТекстUML.ДобавитьСтроку("left to right direction");
	КонецЕсли;
	
	ТекстUMLДобавитьСтрокуГруппы("rectangle Документы {");
	
	Для Каждого Док Из Метаданные.Документы Цикл
		
		ЭлементыФормы.ТекстUML.ДобавитьСтроку("	(" + УбратьСимволы(Док.Синоним) + ") as (" + Док.Имя + ")");
		
		Для Каждого Движение Из Док.Движения Цикл
			
			ТипРегистра = ТипРегистра(Движение);
			
			СтрокаТЗ = ЭтаФорма.Регистры.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, Движение);
			СтрокаТЗ.Документ = Док.Имя;
			СтрокаТЗ.ТипРегистра = ТипРегистра;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстUMLДобавитьСтрокуГруппы("}");
	
	#Область Запрос
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистры", Регистры.Скопировать() );
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Регистры.Имя КАК СТРОКА(255)) КАК Имя,
		|	ВЫРАЗИТЬ(Регистры.Документ КАК СТРОКА(255)) КАК Документ,
		|	ВЫРАЗИТЬ(Регистры.ТипРегистра КАК СТРОКА(255)) КАК ТипРегистра,
		|	ВЫРАЗИТЬ(Регистры.ВидРегистра КАК СТРОКА(255)) КАК ВидРегистра,
		|	ВЫРАЗИТЬ(Регистры.Синоним КАК СТРОКА(1024)) КАК Синоним
		|ПОМЕСТИТЬ ТЗ
		|ИЗ
		|	&Регистры КАК Регистры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТипРегистра,
		|	Имя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ.Имя КАК Имя,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТЗ.Документ) КАК Количество,
		|	ТЗ.ТипРегистра КАК ТипРегистра
		|ПОМЕСТИТЬ Связи
		|ИЗ
		|	ТЗ КАК ТЗ
		|
		|СГРУППИРОВАТЬ ПО
		|	ТЗ.Имя,
		|	ТЗ.ТипРегистра
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ.ТипРегистра КАК ТипРегистра,
		|	ТЗ.Имя КАК Имя,
		|	ТЗ.ВидРегистра КАК ВидРегистра,
		|	ТЗ.Синоним
		|ИЗ
		|	ТЗ КАК ТЗ
		|
		|СГРУППИРОВАТЬ ПО
		|	ТЗ.Имя,
		|	ТЗ.ТипРегистра,
		|	ТЗ.ВидРегистра,
		|	ТЗ.Синоним
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипРегистра,
		|	ВидРегистра,
		|	Имя
		|ИТОГИ ПО
		|	ТипРегистра,
		|	ВидРегистра
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ.Документ КАК Документ,
		|	ТЗ.Имя КАК Имя,
		|	ТЗ.ТипРегистра,
		|	Связи.Количество
		|ИЗ
		|	ТЗ КАК ТЗ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Связи КАК Связи
		|		ПО ТЗ.Имя = Связи.Имя
		|			И ТЗ.ТипРегистра = Связи.ТипРегистра
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документ,
		|	Имя";
		
	#КонецОбласти

	Результат = Запрос.ВыполнитьПакет();

	Группы = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Группы.Следующий() Цикл
		ТекстUMLДобавитьСтрокуГруппы("rectangle " + СокрЛП(Группы.ТипРегистра) + " {");
			Подгруппа = Группы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Подгруппа.Следующий() Цикл
				ТекстUMLДобавитьСтрокуГруппы(?(ПустаяСтрока(Подгруппа.ВидРегистра), "", "	rectangle " + СокрЛП(Подгруппа.ВидРегистра) + " {"));
				РегистрыГруппы = Подгруппа.Выбрать();
				Пока РегистрыГруппы.Следующий() Цикл
					ЭлементыФормы.ТекстUML.ДобавитьСтроку(?(ПустаяСтрока(Подгруппа.ВидРегистра), "	", "		") + "(" + УбратьСимволы(СокрЛП(РегистрыГруппы.Синоним)) + ") as (" + СокрЛП(РегистрыГруппы.ТипРегистра) + СокрЛП(РегистрыГруппы.Имя) + ")");
				КонецЦикла;
				ТекстUMLДобавитьСтрокуГруппы(?(ПустаяСтрока(Подгруппа.ВидРегистра), "", "	}"));
			КонецЦикла;
		ТекстUMLДобавитьСтрокуГруппы("}");
	КонецЦикла;
	
	НаправлениеРегистра = Новый Структура;
	НаправлениеРегистра.Вставить("РегистрыНакопления", "-up");
	НаправлениеРегистра.Вставить("РегистрыРасчета", "-right");
	НаправлениеРегистра.Вставить("РегистрыБухгалтерии", "-down");
	НаправлениеРегистра.Вставить("РегистрыСведений", "-left");
	
	Связи = Результат[3].Выбрать();
	Пока Связи.Следующий() Цикл
		ЭлементыФормы.ТекстUML.ДобавитьСтроку(СокрЛП(Связи.ТипРегистра) + СокрЛП(Связи.Имя) + " <" + НаправлениеРегистра[СокрЛП(Связи.ТипРегистра)] + ДлинаСтрелки(Связи.Количество) + СокрЛП(Связи.Документ));
	КонецЦикла;
	
	ЭлементыФормы.ТекстUML.ДобавитьСтроку("@enduml");
	
КонецПроцедуры

Функция УбратьСимволы(Знач СтрокаДанных)
	
	СтрокаДанных = СтрЗаменить(СтрокаДанных, "(", "");
	СтрокаДанных = СтрЗаменить(СтрокаДанных, ")", "");
	Возврат СтрокаДанных;
	
КонецФункции

Процедура ТекстUMLДобавитьСтрокуГруппы(СтрокаUML)
	
	Если ОтобразитьГруппы Тогда
		ЭлементыФормы.ТекстUML.ДобавитьСтроку(СтрокаUML);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	ЭтаФорма.Регистры.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка")); 
	ЭтаФорма.Регистры.Колонки.Добавить("Документ", Новый ОписаниеТипов("Строка")); 
	ЭтаФорма.Регистры.Колонки.Добавить("ТипРегистра", Новый ОписаниеТипов("Строка")); 
	ЭтаФорма.Регистры.Колонки.Добавить("ВидРегистра", Новый ОписаниеТипов("Строка")); 
	ЭтаФорма.Регистры.Колонки.Добавить("Синоним", Новый ОписаниеТипов("Строка")); 
КонецПроцедуры
