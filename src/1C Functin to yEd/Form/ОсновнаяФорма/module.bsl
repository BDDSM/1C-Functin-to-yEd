

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	Заголовок = "Граф вызовов (" + ПолучитьНомерВерсииОбработки() + ")";
	ЗаполнитьСписокТиповОтчета(Истина);
	ТипОтчета = ТипОтчета;
	
КонецПроцедуры



///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ

Процедура ОсновныеДействияФормыПостроитьГраф(Кнопка)
	
	ВыполнитьПостроениеГрафа();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПостроитьГраф_yEd(Кнопка)
	ВыполнитьПостроениеГрафаyEd();
КонецПроцедуры


Процедура ОсновныеДействияФормыВвестиТекст(Кнопка)
	
	ФормаВводаТекста = ПолучитьФорму("ФормаВводаТекста");
	Результат = ФормаВводаТекста.ОткрытьМодально();
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	Функции.Загрузить(Результат.Функции);
	Вызовы.Загрузить(Результат.Вызовы);
	Директивы.Загрузить(Результат.Директивы);
	Секции.Загрузить(Результат.Секции);
	
	ЗаполнитьСписокТиповОтчета(Результат.ДляУправляемойФормы);
	
	ЗаполнитьДеревоФункций();
	
	Если Не ПустаяСтрока(Результат.СтрокаПредупреждений) Тогда
		Текст = Новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(СокрЛП(Результат.СтрокаПредупреждений));
		Текст.Показать("Предупреждения");
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельНастройкаПостроенияГрафов(Кнопка)
	
	ПолучитьФорму("ФормаНастройкиПостроенияГрафов").ОткрытьМодально();
	
КонецПроцедуры



///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ТипОтчетаПриИзменении(Элемент)
	
	ОтобразитьНужныеНастройки();
	ЗаполнитьДеревоФункций();
	
КонецПроцедуры

Процедура ПоКомпонентамСвязностиПриИзменении(Элемент)
	
	ЗаполнитьДеревоФункций();
	
КонецПроцедуры

Процедура ТипОтчетаПоСекциямПриИзменении(Элемент)
	
	ОтобразитьВидимостьВСтраницеПоСекциям();
	
КонецПроцедуры

Процедура ДеревоФункцийВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПостроениеГрафа();
	
КонецПроцедуры

Процедура ДеревоФункцийПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ЯчейкаИмяФункции = ОформлениеСтроки.Ячейки.ИмяФункции;
	ЯчейкаИмяФункции.ОтображатьФлажок = Не ПоКомпонентамСвязности Или (ТипОтчета = 1);
	
	Если ДанныеСтроки.Экспортная Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, ,, Истина);
	КонецЕсли;
	
	Если ДанныеСтроки.Проблемная82 Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДеревоФункцийПриИзмененииФлажка(Элемент, Колонка)
	
	текДанные = ЭлементыФормы.ДеревоФункций.ТекущиеДанные;
	Если текДанные.Выбран = 2 Тогда
		текДанные.Выбран = 0;
	ИначеЕсли текДанные.Выбран = 0 Тогда
		текДанные.Выбран = 1;
	КонецЕсли;
	
	Родитель = текДанные.Родитель;
	Если Родитель = Неопределено Тогда
		// Меняем флажки у подчиненных
		Для Каждого Элемент Из текДанные.Строки Цикл
			Элемент.Выбран = текДанные.Выбран;
			ИзменитьВСпискеИсключаемых(Элемент.Идентификатор, Элемент.Выбран);
		КонецЦикла;
		ИзменитьВСпискеИсключаемых(текДанные.Идентификатор, текДанные.Выбран);
	Иначе
		// Определим значение флажка
		Есть0 = Ложь;
		Есть1 = Ложь;
		Для Каждого Элемент Из Родитель.Строки Цикл
			Если Элемент.Выбран = 0 Тогда
				Есть0 = Истина;
			Иначе
				Есть1 = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не Есть1 Тогда
			Родитель.Выбран = 0;
		ИначеЕсли Есть0 Тогда
			Родитель.Выбран = 2;
		Иначе
			Родитель.Выбран = 1;
		КонецЕсли;
		
		ИзменитьВСпискеИсключаемых(текДанные.Идентификатор, текДанные.Выбран);
		
	КонецЕсли;
	
КонецПроцедуры



///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЯЮЩИЕ ВИДИМОСТЬЮ ЭЛЕМЕНТОВ ФОРМЫ И ИХ ЗАПОЛНЕНИЕМ

Процедура ОтобразитьНужныеНастройки()
	
	Настройки = ЭлементыФормы.СтраницыНастроекПоТипуОтчета;
	Если ТипОтчета = 1 Тогда
		Настройки.ТекущаяСтраница = Настройки.Страницы.СтраницаСекции;
		ОтобразитьВидимостьВСтраницеПоСекциям();
	ИначеЕсли ТипОтчета >= 2 Тогда
		Настройки.ТекущаяСтраница = Настройки.Страницы.СтраницаУправляемаяФорма;
	Иначе
		Настройки.ТекущаяСтраница = Настройки.Страницы.СтраницаНетНастроек;
	КонецЕсли;
	
	ЭлементыФормы.ПоКомпонентамСвязности.Доступность = (ТипОтчета <> 1);
	
КонецПроцедуры

Процедура ОтобразитьВидимостьВСтраницеПоСекциям()
	
	ЭлементыФормы.ОтображатьОбращенияИзСекции.Доступность = (ТипОтчетаПоСекциям = 2);
	ЭлементыФормы.ОтображатьОбращенияКСекции.Доступность  = (ТипОтчетаПоСекциям = 2);
	
КонецПроцедуры

Процедура ЗаполнитьСписокТиповОтчета(ВключатьУправляемыеФормы)
	
	ЭлементыФормы.ТипОтчета.СписокВыбора.Очистить();
	
	ЭлементыФормы.ТипОтчета.СписокВыбора.Добавить(0, "Общий список");
	ЭлементыФормы.ТипОтчета.СписокВыбора.Добавить(1, "По секциям");
	Если ВключатьУправляемыеФормы Тогда
		ЭлементыФормы.ТипОтчета.СписокВыбора.Добавить(2, "Управляемая форма");
		ЭлементыФормы.ТипОтчета.СписокВыбора.Добавить(3, "Управляемая форма (только приводящие к вызову на сервер)");
	ИначеЕсли ТипОтчета > 1 Тогда
		ТипОтчета = 0;
	КонецЕсли;
	
	ОтобразитьНужныеНастройки();
	
КонецПроцедуры



///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьДеревоФункций()
	
	ПостроитьДеревоФункций(ДеревоФункций);
	
КонецПроцедуры

Процедура ИзменитьВСпискеИсключаемых(Идентификатор, Выбран)
	
	Если ПустаяСтрока(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = ИсключаемыеФункций.НайтиПоЗначению(Идентификатор);
	Если Не Выбран И ЭлементСписка = Неопределено Тогда
		ИсключаемыеФункций.Добавить(Идентификатор);
	ИначеЕсли Выбран И ЭлементСписка <> Неопределено Тогда
		ИсключаемыеФункций.Удалить(ЭлементСписка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПостроениеГрафа()
	
	// Проверим настойки построения графов
	РабочийКаталог = РабочийКаталогДляПостроенияГрафов;
	Если ПустаяСтрока(РабочийКаталог) Тогда
		Предупреждение("Не выполнена настройка построения графов!");
		Возврат;
	КонецЕсли;
	Если (Прав(РабочийКаталог, 1) <> "\") И (Прав(РабочийКаталог, 1) <> "/") Тогда
		РабочийКаталог = РабочийКаталог + "\";
	КонецЕсли;
	
	ИмяТекстовогоФайла   = РабочийКаталог + "graph.txt";
	ИмяИсполняемогоФайла = РабочийКаталог + "graph.bat";
	Файл = Новый Файл(ИмяИсполняемогоФайла);
	Если Не Файл.Существует() Или Не Файл.ЭтоФайл() Тогда
		Предупреждение("Не найден файл: " + ИмяИсполняемогоФайла + "
		|Необходимо выполнить настройку построения графов!");
		Возврат;
	КонецЕсли;
	
	// Проверим, выбрана ли строка
	текДанные = ЭлементыФормы.ДеревоФункций.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Предупреждение("Не выбрана строка!");
		Возврат;
	КонецЕсли;
	
	// Получим текст построения графа
	Результат = ПодготовитьПостроениеГрафа(ДеревоФункций, текДанные.ИДСтроки, Ложь);
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Предупреждение(Результат);
		Возврат;
	КонецЕсли;
	
	// Если отображать только идентификаторы, выведем в текстовом документе расшифровку
	Если ОтображатьТолькоИдентификаторы Тогда
		Текст = Новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(Результат.ИдентификаторыФункций);
		Текст.Показать("Идентификаторы функций");
	КонецЕсли;
	
	// Запишем текст и выполним команду построения
	Текст = Новый ЗаписьТекста(ИмяТекстовогоФайла, КодировкаТекста.UTF8,, Истина, Символы.ПС);
	Текст.ЗаписатьСтроку(Результат.ТекстГрафа);
	Текст.Закрыть();
	ЗапуститьПриложение(ИмяИсполняемогоФайла);
	
КонецПроцедуры

Процедура ВыполнитьПостроениеГрафаyEd()
	
	// Проверим настойки построения графов
	РабочийКаталог = РабочийКаталогДляПостроенияГрафов;
	Если ПустаяСтрока(РабочийКаталог) Тогда
		Предупреждение("Не выполнена настройка построения графов!");
		Возврат;
	КонецЕсли;
	Если (Прав(РабочийКаталог, 1) <> "\") И (Прав(РабочийКаталог, 1) <> "/") Тогда
		РабочийКаталог = РабочийКаталог + "\";
	КонецЕсли;
	
	ИмяТекстовогоФайла   = РабочийКаталог + "graph.gml";
	
	// Проверим, выбрана ли строка
	текДанные = ЭлементыФормы.ДеревоФункций.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Предупреждение("Не выбрана строка!");
		Возврат;
	КонецЕсли;
	
	// Получим текст построения графа
	Результат = ПодготовитьПостроениеГрафа(ДеревоФункций, текДанные.ИДСтроки, Истина);
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Предупреждение(Результат);
		Возврат;
	КонецЕсли;
	
	// Если отображать только идентификаторы, выведем в текстовом документе расшифровку
	Если ОтображатьТолькоИдентификаторы Тогда
		Текст = Новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(Результат.ИдентификаторыФункций);
		Текст.Показать("Идентификаторы функций");
	КонецЕсли;
	
	// Запишем текст gml
	Текст = Новый ЗаписьТекста(ИмяТекстовогоФайла, КодировкаТекста.ANSI);
	Текст.ЗаписатьСтроку(Результат.ТекстГрафа);
	Текст.Закрыть();
	
КонецПроцедуры