

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Заголовок = "Граф вызовов (" + РеквизитФормыВЗначение("Объект").ПолучитьНомерВерсииОбработки() + ")";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьСписокТиповОтчета(Истина);
	
КонецПроцедуры



///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВвестиТекст(Команда)
	
	ИмяОбработки = ЭтаФорма.ИмяФормы;
	ПараметрыОткрытия = Новый Структура("РежимОпределенияДиректив82", Объект.РежимОпределенияДиректив82);
	Результат = ОткрытьФормуМодально("ВнешняяОбработка.ГрафВызовов.Форма.ФормаВводаТекстаУправляемая", ПараметрыОткрытия);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	ЗаполнитьСписокТиповОтчета(Результат.ДляУправляемойФормы);
	
	ЗаполнитьДанныеИзМодуля(Результат);
	
	Объект.РежимОпределенияДиректив82 = Результат.РежимОпределенияДиректив82;
	Если Не ПустаяСтрока(Результат.СтрокаПредупреждений) Тогда
		Текст = Новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(СокрЛП(Результат.СтрокаПредупреждений));
		Текст.Показать("Предупреждения");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПостроенияГрафов(Команда)
	
	ПараметрыОткрытия = Новый Структура("РабочийКаталог", Объект.РабочийКаталогДляПостроенияГрафов);
	Результат = ОткрытьФормуМодально("ВнешняяОбработка.ГрафВызовов.Форма.ФормаНастройкиПостроенияГрафовУправляемая", ПараметрыОткрытия);
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Объект.РабочийКаталогДляПостроенияГрафов = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьГраф(Команда)
	
	ВыполнитьПостроениеГрафа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьГрафyEd(Команда)
	
	ВыполнитьПостроениеГрафаyEd();
	
КонецПроцедуры
	
&НаКлиенте
Процедура НайтиУправляемыеФормы(Команда)
	
	Результат = НайтиУправляемыеФормыСервер();
	Если ПустаяСтрока(Результат) Тогда
		Предупреждение("В конфигурации не найдены управляемые формы!");
	Иначе
		Текст = Новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(Результат);
		Текст.Показать("Управляемые формы конфигурации");
	КонецЕсли;
	
КонецПроцедуры



///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ТипОтчетаПриИзменении(Элемент)
	
	ОтобразитьНужныеНастройки();
	ЗаполнитьДеревоФункций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоКомпонентамСвязностиПриИзменении(Элемент)
	
	ЗаполнитьДеревоФункций();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОтчетаПоСекциямПриИзменении(Элемент)
	
	ОтобразитьВидимостьВСтраницеПоСекциям();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФункцийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПостроениеГрафа();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФункцийВыбранПриИзменении(Элемент)
	
	Если Элементы.ДеревоФункций.ТекущиеДанные.Выбран = 2 Тогда
		Элементы.ДеревоФункций.ТекущиеДанные.Выбран = 0;
	ИначеЕсли Элементы.ДеревоФункций.ТекущиеДанные.Выбран = 0 Тогда
		Элементы.ДеревоФункций.ТекущиеДанные.Выбран = 1;
	КонецЕсли;
	
	текДанные   = Элементы.ДеревоФункций.ТекущиеДанные;
	Родитель    = текДанные.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		// Меняем флажки у подчиненных
		Подчиненные = текДанные.ПолучитьЭлементы();
		Для Каждого Элемент Из Подчиненные Цикл
			Элемент.Выбран = текДанные.Выбран;
			ИзменитьВСпискеИсключаемых(Элемент.Идентификатор, Элемент.Выбран);
		КонецЦикла;
		ИзменитьВСпискеИсключаемых(текДанные.Идентификатор, текДанные.Выбран);
	Иначе
		// Определим значение флажка
		Подчиненные = Родитель.ПолучитьЭлементы();
		Есть0 = Ложь;
		Есть1 = Ложь;
		Для Каждого Элемент Из Подчиненные Цикл
			Если Элемент.Выбран = 0 Тогда
				Есть0 = Истина;
			Иначе
				Есть1 = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не Есть1 Тогда
			Родитель.Выбран = 0;
		ИначеЕсли Есть0 Тогда
			Родитель.Выбран = 2;
		Иначе
			Родитель.Выбран = 1;
		КонецЕсли;
		
		ИзменитьВСпискеИсключаемых(текДанные.Идентификатор, текДанные.Выбран);
		
	КонецЕсли;
	
КонецПроцедуры



///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ДЛЯ ПОИСКА УПРАВЛЯЕМЫХ ФОРМ В КОНФИГУРАЦИИ

&НаСервере
Функция НайтиУправляемыеФормыСервер()
	
	Результат = "";
	
	НайтиУправляемыеФормыВГруппе(Результат,  Метаданные.ПланыОбмена,             "ПланОбмена");
	НайтиУправляемыеФормыВГруппе(Результат,  Метаданные.ХранилищаНастроек,       "ХранилищеНастроек");
	НайтиУправляемыеФормыВОбъекте(Результат, Метаданные.ОбщиеФормы,              "ОбщаяФорма");
	НайтиУправляемыеФормыВГруппе(Результат,  Метаданные.Справочники,             "Справочник");
	НайтиУправляемыеФормыВГруппе(Результат,  Метаданные.Документы,               "Документ");
	НайтиУправляемыеФормыВГруппе(Результат,  Метаданные.ЖурналыДокументов,       "ЖурналДокументов");
	НайтиУправляемыеФормыВГруппе(Результат,  Метаданные.Перечисления,            "Перечисление");
	НайтиУправляемыеФормыВГруппе(Результат,  Метаданные.Отчеты,                  "Отчет");
	НайтиУправляемыеФормыВГруппе(Результат,  Метаданные.Обработки,               "Обработка");
	НайтиУправляемыеФормыВГруппе(Результат,  Метаданные.ПланыВидовХарактеристик, "ПланВидовХарактеристик");
	НайтиУправляемыеФормыВГруппе(Результат,  Метаданные.ПланыСчетов,             "ПланСчетов");
	НайтиУправляемыеФормыВГруппе(Результат,  Метаданные.ПланыВидовРасчета,       "ПланВидовРасчета");
	НайтиУправляемыеФормыВГруппе(Результат,  Метаданные.РегистрыСведений,        "РегистрСведений");
	НайтиУправляемыеФормыВГруппе(Результат,  Метаданные.РегистрыНакопления,      "РегистрНакопления");
	НайтиУправляемыеФормыВГруппе(Результат,  Метаданные.РегистрыБухгалтерии,     "РегистрБухгалтерии");
	НайтиУправляемыеФормыВГруппе(Результат,  Метаданные.РегистрыРасчета,         "РегистрРасчета");
	НайтиУправляемыеФормыВГруппе(Результат,  Метаданные.БизнесПроцессы,          "БизнесПроцесс");
	НайтиУправляемыеФормыВГруппе(Результат,  Метаданные.Задачи,                  "Задача");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НайтиУправляемыеФормыВГруппе(Результат, МетаданныеГруппы, ИмяГруппы)
	
	Для Каждого __Объект Из МетаданныеГруппы Цикл
		НайтиУправляемыеФормыВОбъекте(Результат, __Объект.Формы, ИмяГруппы + "." + __Объект.Имя);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НайтиУправляемыеФормыВОбъекте(Результат, МетаданныеОбъекта, ИмяОбъекта)
	
	Для Каждого __Объект Из МетаданныеОбъекта Цикл
		Если __Объект.ТипФормы = Метаданные.СвойстваОбъектов.ТипФормы.Управляемая Тогда
			Результат = Результат + ИмяОбъекта + "." + __Объект.Имя + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры



///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЯЮЩИЕ ВИДИМОСТЬЮ ЭЛЕМЕНТОВ ФОРМЫ И ИХ ЗАПОЛНЕНИЕМ

&НаКлиенте
Процедура ОтобразитьНужныеНастройки()
	
	Если Объект.ТипОтчета = 1 Тогда
		Элементы.СтраницыНастроекПоТипуОтчета.ТекущаяСтраница = Элементы.СтраницаСекции;
		ОтобразитьВидимостьВСтраницеПоСекциям();
	ИначеЕсли Объект.ТипОтчета >= 2 Тогда
		Элементы.СтраницыНастроекПоТипуОтчета.ТекущаяСтраница = Элементы.СтраницаУправляемаяФорма;
	Иначе
		Элементы.СтраницыНастроекПоТипуОтчета.ТекущаяСтраница = Элементы.СтраницаНетНастроек;
	КонецЕсли;
	
	Элементы.ПоКомпонентамСвязности.Доступность = (Объект.ТипОтчета <> 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВидимостьВСтраницеПоСекциям()
	
	Элементы.ОтображатьОбращенияИзСекции.Доступность = (Объект.ТипОтчетаПоСекциям = 2);
	Элементы.ОтображатьОбращенияКСекции.Доступность  = (Объект.ТипОтчетаПоСекциям = 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокТиповОтчета(ВключатьУправляемыеФормы)
	
	Элементы.ТипОтчета.СписокВыбора.Очистить();
	
	Элементы.ТипОтчета.СписокВыбора.Добавить(0, "Общий список");
	Элементы.ТипОтчета.СписокВыбора.Добавить(1, "По секциям");
	Если ВключатьУправляемыеФормы Тогда
		Элементы.ТипОтчета.СписокВыбора.Добавить(2, "Управляемая форма");
		Элементы.ТипОтчета.СписокВыбора.Добавить(3, "Управляемая форма (только приводящие к вызову на сервер)");
	ИначеЕсли Объект.ТипОтчета > 1 Тогда
		Объект.ТипОтчета = 0;
	КонецЕсли;
	
	ОтобразитьНужныеНастройки();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ЗаполнитьДеревоФункций()
	
	ЭтаОбработка  = РеквизитФормыВЗначение("Объект");
	Дерево = РеквизитФормыВЗначение("ДеревоФункций");
	ЭтаОбработка.ПостроитьДеревоФункций(Дерево);
	ЗначениеВРеквизитФормы(Дерево, "ДеревоФункций");
	
	Элементы.ДеревоФункцийВыбран.Видимость = (Не Объект.ПоКомпонентамСвязности) Или (Объект.ТипОтчета = 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВСпискеИсключаемых(Идентификатор, Выбран)
	
	Если ПустаяСтрока(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = Объект.ИсключаемыеФункций.НайтиПоЗначению(Идентификатор);
	Если Не Выбран И ЭлементСписка = Неопределено Тогда
		Объект.ИсключаемыеФункций.Добавить(Идентификатор);
	ИначеЕсли Выбран И ЭлементСписка <> Неопределено Тогда
		Объект.ИсключаемыеФункций.Удалить(ЭлементСписка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПостроениеГрафа()
	
	// Проверим настойки построения графов
	РабочийКаталог = Объект.РабочийКаталогДляПостроенияГрафов;
	Если ПустаяСтрока(РабочийКаталог) Тогда
		Предупреждение("Не выполнена настройка построения графов!");
		Возврат;
	КонецЕсли;
	Если (Прав(РабочийКаталог, 1) <> "\") И (Прав(РабочийКаталог, 1) <> "/") Тогда
		РабочийКаталог = РабочийКаталог + "\";
	КонецЕсли;
	
	ИмяТекстовогоФайла   = РабочийКаталог + "graph.txt";
	ИмяИсполняемогоФайла = РабочийКаталог + "graph.bat";
	Файл = Новый Файл(ИмяИсполняемогоФайла);
	Если Не Файл.Существует() Или Не Файл.ЭтоФайл() Тогда
		Предупреждение("Не найден файл: " + ИмяИсполняемогоФайла + "
		|Необходимо выполнить настройку построения графов!");
		Возврат;
	КонецЕсли;
	
	// Проверим, выбрана ли строка
	текДанные = Элементы.ДеревоФункций.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Предупреждение("Не выбрана строка!");
		Возврат;
	КонецЕсли;
	
	// Получим текст построения графа
	Результат = ПодготовитьПостроениеГрафа(текДанные.ИДСтроки, Ложь);
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Предупреждение(Результат);
		Возврат;
	КонецЕсли;
	
	// Если отображать только идентификаторы, выведем в текстовом документе расшифровку
	Если Объект.ОтображатьТолькоИдентификаторы Тогда
		Текст = Новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(Результат.ИдентификаторыФункций);
		Текст.Показать("Идентификаторы функций");
	КонецЕсли;
	
	// Запишем текст и выполним команду построения
	Текст = Новый ЗаписьТекста(ИмяТекстовогоФайла, КодировкаТекста.UTF8,, Истина, Символы.ПС);
	Текст.ЗаписатьСтроку(Результат.ТекстГрафа);
	Текст.Закрыть();
	ЗапуститьПриложение(ИмяИсполняемогоФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПостроениеГрафаyEd()
	// Проверим настойки построения графов
	РабочийКаталог = Объект.РабочийКаталогДляПостроенияГрафов;
	Если ПустаяСтрока(РабочийКаталог) Тогда
		Предупреждение("Не выполнена настройка построения графов!");
		Возврат;
	КонецЕсли;
	Если (Прав(РабочийКаталог, 1) <> "\") И (Прав(РабочийКаталог, 1) <> "/") Тогда
		РабочийКаталог = РабочийКаталог + "\";
	КонецЕсли;
	
	ИмяТекстовогоФайла   = РабочийКаталог + "graph.gml";
	
	// Проверим, выбрана ли строка
	текДанные = Элементы.ДеревоФункций.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Предупреждение("Не выбрана строка!");
		Возврат;
	КонецЕсли;
	
	// Получим текст построения графа
	Результат = ПодготовитьПостроениеГрафа(текДанные.ИДСтроки, Истина);
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Предупреждение(Результат);
		Возврат;
	КонецЕсли;
	
	// Если отображать только идентификаторы, выведем в текстовом документе расшифровку
	Если Объект.ОтображатьТолькоИдентификаторы Тогда
		Текст = Новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(Результат.ИдентификаторыФункций);
		Текст.Показать("Идентификаторы функций");
	КонецЕсли;
	
	// Запишем текст gml
	Текст = Новый ЗаписьТекста(ИмяТекстовогоФайла, КодировкаТекста.ANSI);
	Текст.ЗаписатьСтроку(Результат.ТекстГрафа);
	Текст.Закрыть();
КонецПроцедуры

&НаСервере
Функция ПодготовитьПостроениеГрафа(ИДСтроки, GML)
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	Дерево = РеквизитФормыВЗначение("ДеревоФункций");
	Возврат ЭтаОбработка.ПодготовитьПостроениеГрафа(Дерево, ИДСтроки, GML);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеИзМодуля(ДанныеИзМодуля)
	
	Таблицы = Новый Структура("Функции,Вызовы,Директивы,Секции");
	
	Для Каждого Элемент Из Таблицы Цикл
		ИмяТаблицы = Элемент.Ключ;
		Путь = ДанныеИзМодуля[ИмяТаблицы];
		Объект[ИмяТаблицы].Загрузить(ПолучитьИзВременногоХранилища(Путь));
		УдалитьИзВременногоХранилища(Путь);
	КонецЦикла;
	
	ЗаполнитьДеревоФункций();
	
КонецПроцедуры


